[{"categories":null,"content":"To 罗一通 我亲爱的一通，生日快乐！ 今天我们这里下雪了，起床睁眼看见后的惊喜之余，就立刻拿起手机告诉宝，感觉一切新鲜的有趣的事物都想分享给宝，我知道宝也是这样的，对吧。这种感觉让我心安，我知道在某个地方，有个爱我的人和我一样欣喜于彼此的相遇，也让我充满期待，对我们的未来满怀憧憬。 套用一句以前觉得俗套但现在愈发深有体会的话：“时间过的真快！”，和宝相知、相遇、然后正式在一起已经五个多月，我们一起度过了上海和苏州的三个季节了。我希望可以和宝一起走过往后的一年又一年，漫长而又短暂、注定会充满坎坷而又热情滚烫的许多岁月。 刚才又看了和宝刚认识时候的聊天记录，感觉就已经存在了蛮多的回忆。第一次见到宝是在知乎上，第一眼就被宝简单清澈的笑容和性欲满满的腹肌吸引到了，然后鼓起勇气搭讪。害，宝，你好可爱，又帅又可爱！mua。 你第一次叫我宝是在我给你发六角恐龙，你说它散焦了。（may it rest in peace）那时候我真的可以说是欣喜若狂喜不自禁了。后来就是好几个周的线上相思，你在忙着做主持人，我在找课题题目，每天都充满了夏天甜蜜的味道。我从老家回上海后，你也来找我，我们一起看了“那年惊蛰”，我还记得那天傍晚吃饭湘菜在河边我们你侬我侬的样子，和宝在一起好幸福。后来的后来，我们搬进了你的小房子，终于可以在周末和宝有一个自己的小窝，我们一起做饭，一起在厨房拥抱，一起扔雪球，冬天苏州的白昼太短了，周末也太短了，和宝在一起永远都不嫌够。 宝，你的脾气好好，我们吵过架，但每次都是你来哄我开心。我还喜欢杠宝，哎，我的臭脾气，其实就是想逗宝玩，但这样不好！所以宝，下次我再总是杠你，宝就肛我！ 还有下次吵架，一定要我来哄宝，好好哄，立贴为证。 希望下次生日可以在宝身边，吻着宝说一句“生日快乐”。 想说的东西好多啊，可是好久不动笔，感觉所述杂乱无章。但，宝，我喜欢你。我会好好爱着宝，肆无忌惮的爱着宝，把最美好的自己给宝。 爱你的阿豪！ ","date":"2022-01-27","objectID":"/bao/happybirthday2022/:0:0","tags":null,"title":"宝生日快乐","uri":"/bao/happybirthday2022/"},{"categories":null,"content":"MIT6.824 Lab1 https://pdos.csail.mit.edu/6.824/labs/lab-mr.html ","date":"2022-01-18","objectID":"/6824_lab1/:0:0","tags":null,"title":"6824_lab1","uri":"/6824_lab1/"},{"categories":null,"content":"MapReduce框架结构 master负责分配任务（map or reduce）给worker进程 map worker从input files读取一个shard并进行处理，然后存储中间结果，中间结果会根据partition function分割成R个region. reduce worker从各个map worker处读取其负责的中间结果文件，**需要进行一个sort，因为 往往一个reduce task会负责多个不同的key，进行sort来把相同的key-value进行group， 然后 进行reduce操作并写入结果文件。 ","date":"2022-01-18","objectID":"/6824_lab1/:1:0","tags":null,"title":"6824_lab1","uri":"/6824_lab1/"},{"categories":null,"content":"针对failure问题的解决方案：rename map和reduce worker均生成temp file。 map worker完成后，生成R个中间temp 文件，并把文件名传给coordinator，若coordinator没收到过 该map task的，则记录下来，否则忽略。 reduce worker则根据coordinator提供的文件名进行读取，结果也写入temp file，完成后进行rename， 因此多个相同的reduce worker也只会产生一个output file。（output file位于GFS上，不是local disk） ","date":"2022-01-18","objectID":"/6824_lab1/:1:1","tags":null,"title":"6824_lab1","uri":"/6824_lab1/"},{"categories":null,"content":"针对straggler问题： 当一个map-reduce快要完成时，coordinator同时开启一些backup进程来完成剩下的工作，不论是backup还是 primary先完成，整个job都完成了。 ","date":"2022-01-18","objectID":"/6824_lab1/:1:2","tags":null,"title":"6824_lab1","uri":"/6824_lab1/"},{"categories":null,"content":"Lab1 用go语言实现一个简单的MapReduce系统(coordinator + worker)，多个worker进程调用 application的Map和Reduce function，并负责中间文件和结果文件的读写。worker通过RPC 与coordinator交流，ask for task，coordinator负责分配task给worker，并处理work的failuer问题： 某个worker长时间还未完成时，把这个task给另一个worker。 ","date":"2022-01-18","objectID":"/6824_lab1/:2:0","tags":null,"title":"6824_lab1","uri":"/6824_lab1/"},{"categories":null,"content":"大体思路 框架已经实现了worker通过rpc与coordinator交流。 worker向coordinator发信息，请求新的任务 coordinator根据当前的meta data，发送任务给worker map任务：包括input， task_no, reduce task数目（用作中间结果命名, mr-X-Y） reduce任务：包括task_no(任务编号), map task数目（用来读取所有中间结果对应partition） worker根据收到的回复，执行相应任务：map or reduce worker执行完成后通知coordinator，coordinator更新meta data coordinator发现job 完成后，再收到worker的请求的话，回复Done，worker收到后退出。 处理straggler问题： coordinator维护一些task的meta data：task的开始时间 coordinator发task流程：先发map，再发reduce，若都完成，发送Done 遍历所有map任务，若存在map任务未完成： 若该map任务未开始（start_stamp = 0）或者执行时间已经超过10s 把该map task发给该请求worker 否则，该任务正在执行（map未done），继续遍历 若map未done，且所有map task都正常运行，告诉该worker等待 若map已done，类似的便利reduce任务 若reduce已done，告诉worker Done ","date":"2022-01-18","objectID":"/6824_lab1/:2:1","tags":null,"title":"6824_lab1","uri":"/6824_lab1/"},{"categories":["paper"],"content":"KungFu: Making Training in Distributed Machine Learning Adaptive 一篇讲adaptive 分布式训练框架设计与实现的论文。在分布式训练中，影响训练的主要有超参（bs，lr）, 系统参数（worker 数量，通信拓扑） 这篇文章针对TensorFlow开发了一个分布式ML library。用户可以借此设计一些Adaptation Policy来描述 如何在训练过程中改变hyper和system 参数。 感觉更多是系统实现上的思考，如何monitor各种metric，以及如何完成相应的control operation。 ","date":"2022-01-15","objectID":"/kungfu/:0:0","tags":["ddl"],"title":"Kungfu","uri":"/kungfu/"},{"categories":["paper"],"content":"Adaption Policies 提供了一层软件抽象给用户，用户可以定制自己的policy。 关键点：framework-independent 举了一个例子：根据GNS（gradient noise sclae）来动态改变bs ","date":"2022-01-15","objectID":"/kungfu/:1:0","tags":["ddl"],"title":"Kungfu","uri":"/kungfu/"},{"categories":["paper"],"content":"最重要的两点： 如何进行低开销的metric monitoring 如何根据metric和policy在分布式环境下做出work stage的management ","date":"2022-01-15","objectID":"/kungfu/:2:0","tags":["ddl"],"title":"Kungfu","uri":"/kungfu/"},{"categories":["paper"],"content":"Monitoring 主要是monitor worker的performance和gradient. 对于一些需要实时梯度信息，比如GNS的policy，这个metric的计算需要所有worker的gradient信息， Kungfu会把所这个monitor需求转化为monitor op(例如对梯度的再次处理）嵌入到data flow中，这样就可以直接使用到data flow 计算出的中间结果。实现了低开销梯度信息采集。 由于monitor metric需要全局的信息，所以需要collective communication，为了防止block training， kungfu设计了一层 asynchronous collective communication。 ","date":"2022-01-15","objectID":"/kungfu/:3:0","tags":["ddl"],"title":"Kungfu","uri":"/kungfu/"},{"categories":["paper"],"content":"collective communication for dataflows 在参数更新这一环节，一些metric可以借此完成全局metric的计算，还有一些metric需要额外的collective communication. Kungfu利用async来overlap。 另一个问题是，不同worker完成梯度的顺序不一样，async可能会导致inconsistency。Horovod采用了 一个中心式的coordinator，来track每个worker上的ready gradient named collective messages: 每一个named collective message携带两个信息：data– 具体的gradient data； key–指出gradient data的归属地。 named collective stages: 每收到一个named collective message，worker识别出它的 key，然后提取出gradient data，放进states中的data buffer进行accumulate，state中的control 用来记录收集了多少了，下一个hop是哪个，如果收集满了就返回结果。 最后还讲了怎么优化了下NCCL，按下不表。 ","date":"2022-01-15","objectID":"/kungfu/:3:1","tags":["ddl"],"title":"Kungfu","uri":"/kungfu/"},{"categories":["paper"],"content":"根据实时metric数据来调整worker的parameters 大部分的系统，configure parameter在编译的时候都确定了，然后生成的data flow就offload到GPU上， 后续的改变不会再影响dataflow了。 还有一些例如，pytorch，tensorflow eager模式，会允许动态改变一些，例如bs， lr， horovod elastic 还可以改变worker数量，但通信拓扑的改变还不支持。 Kungfu把这些参数设计为data flow中的一部分，configuration operators, 他们接收communication layer传来的数据（metric），计算新的parameter。 另一个关键是要保证communication layer的数据都是consistency的，没大看懂 Task Away： 这篇文章主要是讲如何根据实时的metric来实现一些配置参数的adpative changing。 提供了一些软件层面的抽象给用户定制各种policy。 亮点是如何低开销的monitor 各种metric：把这些monitor op embed到dataflow中，辅以async 的 collective communication 还有就是分布式那一套，consistency的处理· ","date":"2022-01-15","objectID":"/kungfu/:4:0","tags":["ddl"],"title":"Kungfu","uri":"/kungfu/"},{"categories":null,"content":"Here I am. ","date":"2022-01-15","objectID":"/firstpost/:1:0","tags":null,"title":"First","uri":"/firstpost/"},{"categories":null,"content":"Harry Potter ","date":"2022-01-14","objectID":"/movies/my-first-post/:1:0","tags":null,"title":"影评","uri":"/movies/my-first-post/"},{"categories":["diary"],"content":"Today’s achievement: 阅读了一篇经济学人文章 完成了神经网络课程的大作业proposal ","date":"2021-04-19","objectID":"/04-19-21-diary/:1:0","tags":["English"],"title":"04 19 21 Diary","uri":"/04-19-21-diary/"},{"categories":["diary"],"content":"1. The Economists pragmatic: dealing with problems in a sensible, practical way instead of strictly follow a set of principles. Ross took a more pragmatic approach to management this problem. ill-fated: 不幸的，倒霉的 an ill-fated expedition 一场注定不成功的冒险 fascism: 法西斯主义 espouse: to support an idea, belife etc, especially a political one. He espouses a variety of scientific, social and political causes. referendum: when people vote in order to make a decision about a paricular subject, rather than voting for a person. vexed: a complicated problem that has caused a lot of discussion and argument and is difficult to solve. vexed issue / problem / question etc. resentment: a feeling of anger because something has happened that you think is unfair. He felt considerable resentment towards Bob for making him work late. fester: 1) if an unpleasent feeling or problem festers, it gets worse because it has not been dealt with. 2) if a wound festers, it becomes infected. Resentments fester. fray: 磨损 He had frayed the bottom of his jeans. bicker: to argue, especially about something unimportant. When not bickering about the constitutional question, the UK’s constitutent parts work together well. plaster: 1）石灰 2） to put a wet, usually sticky substance all over a surface so that it is thick covered. Her face was plastered with make-up. friction: 1) disagreement, angry feelings, or unfriendness between people. 2)the nature force that prevents one surface from sliding easily over another surface. He need to improve the Britain’s relation with Europe, including by aligning Britain’s food-and-agriculture standards with those of the EU – the main source of trade friction that has infuriated Northen Ireland’s unionists. Check your rope frequently, as friction against the rock can wear it away. jeopardy: in danger of beeing lost or damaged. That would make a trade deal with America harder, but no such deal is on offer now, and none ever will be if the peace in Northen Ireland is put in jeopardy. Bangal 孟加拉 Bangladeshi 孟加拉人 Serbia 塞尔维亚 Serb 塞尔维亚人 Croatia 克罗地亚 Croat 克罗地亚人 Czech 捷克人 Slovak 斯洛伐克人 ","date":"2021-04-19","objectID":"/04-19-21-diary/:1:1","tags":["English"],"title":"04 19 21 Diary","uri":"/04-19-21-diary/"},{"categories":["diary"],"content":"tricks汇总 linux下的tar命令 -f 指定archive文件 -z 使用gzip处理archive文件，生成或解压缩.gz文件 -x 从archive中还原文件 -c 建立新的archive文件 tar -zxvf file.tar.gz 解压缩得到.tar的archive然后还原archive得到file tar -zcvf file.tar.gz file 打包并用gzip压缩 linux下的zip命令： 用于压缩文件 -r 递归处理指定文件目录 -d 从.zip文件中删除指定文件 unzip 用于解压缩 latex多图并排 \\begin{figure}[H] \\centering %图片全局居中 \\subfigure[name1]{ \\label{Fig.sub.1} \\includegraphics[width=0.45\\textwidth]{a.pdf}} \\subfigure[name2]{ \\label{Fig.sub.2} \\includegraphics[width=0.45\\textwidth]{b.pdf}} \\caption{Main name} \\label{Fig.main} \\end{figure} pandas 基本数据类型 Series: 一维带标签的数组， ndarray-like， dict-like DataFrame: 二维的数据结构，不同的列可能有不同的数据类型，相当于一个spreadsheet In [37]: d = { \"one\": pd.Series([1.0, 2.0, 3.0], index=[\"a\", \"b\", \"c\"]), \"two\": pd.Series([1.0, 2.0, 3.0, 4.0], index=[\"a\", \"b\", \"c\", \"d\"]),} In [38]: df = pd.DataFrame(d) In [39]: df Out[39]: one two a 1.0 1.0 b 2.0 2.0 c 3.0 3.0 d NaN 4.0 从 .txt等 中读取数据 pd.read_csv(\"a.txt\", header=None) 太杂了，边用边学吧 ","date":"2021-04-07","objectID":"/20-04-07-diary/:1:0","tags":["linux","pandas"],"title":"20/04/07 Diary","uri":"/20-04-07-diary/"},{"categories":["diary"],"content":"杂记 看到刘尚育大佬的豆瓣日记，写的他去跳蚤市场买了白岩诗社的胸针且偶遇了一位姑娘后来又一起参加沙龙的故事。没有细读，但真的是让人读起来感觉美好，如清风徐来。不知道是自己阅读太少还是懒于思考的缘故，想要用文字记录时想到的只是初高中应试练就的套路。最近记忆力也差了许多，莫非是要学要记的东西太多，感觉确实太多但又都想记住，但又真的努力去记住了么？有些东西，虽然读起来很熟悉，但自己从头开始复述却陌生的很。 你我今夜共在香樟下，像草垛在风力寻找火种 –香樟狂想曲 豫章故郡，洪都新府，星分翼枕，地接衡庐 ","date":"2021-04-07","objectID":"/20-04-07-diary/:1:1","tags":["linux","pandas"],"title":"20/04/07 Diary","uri":"/20-04-07-diary/"},{"categories":null,"content":"MPI 初探 MPI_Init(NULL, NULL); // 两个参数保留未来使用 MPI_COMM_WORLD // a built-in communicator 每个进程有一个特定的rank 获取进程rank: int world_rank; MPI_Comm_Rank(MPI_COMM_WORLD, \u0026world_rank); 获取总的并行进程数： int world_size; MPI_Comm_Size(MPI_COMM_WORLD, \u0026world_size) ","date":"2021-04-07","objectID":"/mpi_first/:0:0","tags":["MPI"],"title":"MPI_first","uri":"/mpi_first/"},{"categories":null,"content":"Message sending and receiving 发送消息 MPI_Send( void* data, int count, MPI_Type datatype, int destination, int tag, MPI_Comm communicator ) 接收消息 MPI_Receive( void* data, int count, MPI_Type datatype, int source, int tag, MPI_Comm communicator ) task due 学习pytorch的自动求导机制 4/10 学习cmake和make相关知识 4/10 ","date":"2021-04-07","objectID":"/mpi_first/:1:0","tags":["MPI"],"title":"MPI_first","uri":"/mpi_first/"},{"categories":null,"content":"GPU Memory Model ","date":"2020-12-07","objectID":"/gpu_mm/:0:0","tags":["GPU"],"title":"GPU_MM","uri":"/gpu_mm/"},{"categories":null,"content":"自动执行的一批命令（用户级别） 当bash最为注册shell被启动时：自动执行~/.bash_profile 当bash作为注册shell退出时：自动执行~/.bash_logout 当bash作为交互式shell启动时：自动执行~/.bashrc 脚本文件 bash -x \u003c.sh\u003e: 打印每一行命令 ./xx.sh: 在子进程中执行 . xx.sh = source xx.sh： 在当前shell进程中执行 ","date":"2020-11-16","objectID":"/shell_basic1/:0:0","tags":null,"title":"Shell_basic1","uri":"/shell_basic1/"},{"categories":null,"content":"历史与别名 ","date":"2020-11-16","objectID":"/shell_basic1/:1:0","tags":null,"title":"Shell_basic1","uri":"/shell_basic1/"},{"categories":null,"content":"历史表 先前键入的命令存于历史表 编号递增，FIFO刷新 表大小由变量HISTSIZE设定，该配置位于~/.bashrc history：查看历史命令 !! : 引用上一命令 !str ： 以str开头的最近使用的命令 ","date":"2020-11-16","objectID":"/shell_basic1/:1:1","tags":null,"title":"Shell_basic1","uri":"/shell_basic1/"},{"categories":null,"content":"别名和别名替换 alias alias rm = ‘rm -i’ ","date":"2020-11-16","objectID":"/shell_basic1/:1:2","tags":null,"title":"Shell_basic1","uri":"/shell_basic1/"},{"categories":null,"content":"输入重定向 stdin 0号文件描述符 \u003c file: 从file中获取输入 \u003c\u003c STR: 从shell中获取输入，直到再次遇到字符串STR，同时会对特殊变量进行替换，例如`date`，若禁止替换，使用 \u003c\u003c ‘STR’ \u003c\u003c\u003c ABCD: 获得的输入即为’ABCD' base64：将输入变为base64编码 ","date":"2020-11-16","objectID":"/shell_basic1/:1:3","tags":null,"title":"Shell_basic1","uri":"/shell_basic1/"},{"categories":null,"content":"输出重定向与管道 \u003e filename: stdout输出到文件（覆盖） \u003e\u003e filename: stdout输出到文件（追加） 2\u003e filename: stderr输出到文件 2\u003e\u00261 filename: 将文件句柄2重定向到文件描述符1指向的文件 gcc test.c \u003e test.err \u003e 2\u003e\u00261 管道：仅把stdout进行管道， 如果需将stderr管道 2\u003e\u00261 ","date":"2020-11-16","objectID":"/shell_basic1/:1:4","tags":null,"title":"Shell_basic1","uri":"/shell_basic1/"},{"categories":["linux"],"content":"每日Linux命令 ","date":"2020-11-15","objectID":"/linux_11-15/:0:0","tags":["linux"],"title":"Linux_11 15","uri":"/linux_11-15/"},{"categories":["linux"],"content":"1. watch 周期性的执行一个命令并展示其输出 -n(–interval) \u003csecs\u003e 间隔多少秒执行 ","date":"2020-11-15","objectID":"/linux_11-15/:1:0","tags":["linux"],"title":"Linux_11 15","uri":"/linux_11-15/"},{"categories":["linux"],"content":"2. nohup 运行一个命令，对hangup免疫，连接远程主机即使终端连接中断也可以在server端继续执行。 nohup \u003ccommond\u003e ","date":"2020-11-15","objectID":"/linux_11-15/:2:0","tags":["linux"],"title":"Linux_11 15","uri":"/linux_11-15/"},{"categories":["linux"],"content":"3. terminal, shell , console terminal = tty(the first kind of terminal (类似于打字机))， 现代意义的terminal，tty都是软件意义上的，text input/output environment. console(控制台)：physical terminal(bind with 键盘) shell: 命令行的interpreter ","date":"2020-11-15","objectID":"/linux_11-15/:3:0","tags":["linux"],"title":"Linux_11 15","uri":"/linux_11-15/"},{"categories":null,"content":"Git-1 远程仓库 ","date":"2020-11-12","objectID":"/git_branch/:0:0","tags":null,"title":"Git_branch","uri":"/git_branch/"},{"categories":null,"content":"如何新添加一个远程仓库 远程仓库是host在其他地方的仓库，为了进行collaborate， 需要add，remove远程仓库，管理远程分支。 展示远程仓库 git remote 添加远程仓库 git remote add \u003cshortname\u003e \u003curl\u003e ","date":"2020-11-12","objectID":"/git_branch/:1:0","tags":null,"title":"Git_branch","uri":"/git_branch/"},{"categories":null,"content":"Hello world. 🚀 ","date":"2020-11-11","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"}]